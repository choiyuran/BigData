[문항1]
장점:
- 확장성: 하둡은 수평 확장이 가능하므로, 데이터의 양이 증가해도 시스템의 성능을 유지할 수 있습니다. 여러 대의 서버를 클러스터로 구성하여 작업을 분산 처리할 수 있어, 대규모 데이터 처리에 용이합니다.
- 내결함성: 하둡은 데이터를 여러 개의 블록으로 분산 저장하고 복제하여 데이터 손실을 방지합니다. 따라서, 하나의 서버에 장애가 발생하더라도 다른 서버에서 데이터를 복구할 수 있어 시스템의 안정성을 확보할 수 있습니다.
다양한 데이터 유형 처리: 하둡은 다양한 유형의 데이터를 처리할 수 있습니다. 구조적인 데이터뿐만 아니라 비구조적인 데이터, 스트리밍 데이터 등 다양한 형태의 데이터를 효율적으로 처리할 수 있습니다.

단점:
- 지연 시간: 하둡은 대량의 데이터 처리를 위해 분산 환경에서 작업을 수행하기 때문에, 작업을 시작하기까지의 지연 시간이 발생할 수 있습니다. 대용량의 데이터를 저장하고 처리하는 과정에서 일정한 시간이 소요될 수 있습니다.
- 복잡성: 하둡은 초기 구성 및 관리에 대한 복잡성이 있을 수 있습니다. 클러스터 환경에서의 설정, 데이터 분산 및 복제 전략 등에 대한 이해와 관리가 필요합니다. 따라서, 전문적인 지식과 기술이 요구될 수 있습니다.

[문항2]
실시간분석업무에서 사용되는 Spark의 장점:
- 높은 처리 속도: Spark는 메모리 기반의 처리 방식을 사용하여, 디스크 I/O보다 훨씬 빠른 속도로 데이터를 처리할 수 있습니다. 따라서, 대규모의 실시간 데이터를 신속하게 처리할 수 있습니다.
- 다양한 데이터 소스 지원: Spark는 다양한 데이터 소스에 대한 연동이 용이합니다. Hadoop, HDFS, Hive, Cassandra, JDBC 등 다양한 데이터 소스와의 연동이 가능하여 데이터의 유연한 처리가 가능합니다.

실시간분석업무에서 사용되는 Spark의 단점:
- 메모리 요구 사항: Spark는 메모리 기반의 처리 방식을 사용하기 때문에, 대용량 데이터 처리 시 메모리 요구 사항이 큽니다. 메모리 부족으로 인해 성능 저하가 발생할 수 있으며, 적절한 하드웨어 환경이 필요합니다.
- 학습 곡선: Spark는 기존의 MapReduce와는 다른 프로그래밍 모델을 사용하므로, 사용자들은 새로운 개념과 API에 대한 학습 곡선을 겪어야 합니다. 이러한 학습 곡선은 초기 개발 단계에서의 어려움을 초래할 수 있습니다.

배치분석업무에서 사용되는 MapReduce의 장점:
- 확장성: MapReduce는 대용량 데이터에 대한 분산 처리를 지원하여, 클러스터 환경에서 작업을 분산 처리할 수 있습니다. 따라서, 대규모 데이터 처리에 효과적입니다.
- 안정성: MapReduce는 데이터의 복제와 장애 복구 기능을 내장하고 있어, 데이터의 안정성과 내결함성을 보장할 수 있습니다.

배치분석업무에서 사용되는 MapReduce의 단점:
- 처리 속도: MapReduce는 디스크 I/O를 많이 사용하므로, 대용량 데이터 처리 시 처리 속도가 상대적으로 느릴 수 있습니다. 실시간 분석에 비해 응답 시간이 느릴 수 있습니다.
- 제한된 분석 모델: MapReduce는 일련의 맵과 리듀스 단계로 구성되어 있으며, 복잡한 분석 작업을 수행하기에는 제한적일 수 있습니다. 따라서, 다양한 분석 작업을 수행하기 위해서는 추가적인 개발이 필요할 수 있습니다.

[문항3]
<배치 처리 (Batch Processing)>
주기: 일정한 주기 또는 특정 시간 간격에 따라 처리되는 방식입니다. 데이터가 축적된 후 한 번에 처리됩니다.
유형: 대용량의 데이터를 처리하고 분석하는 데 주로 사용됩니다. 대규모 데이터를 일괄적으로 처리하여 결과를 생성합니다.
예시: 매일 또는 매주 데이터 웨어하우스에 저장된 대용량 데이터를 추출하여 분석하는 작업, 주기적으로 수행되는 리포트 생성 작업 등이 배치 처리의 예시입니다.

<실시간 처리 (Real-time Processing)>
주기: 데이터가 발생하는 즉시 또는 매우 짧은 지연 시간 내에 처리되는 방식입니다. 데이터가 실시간으로 처리되어 실시간 응답 및 분석이 가능합니다.
유형: 실시간으로 발생하는 데이터를 실시간으로 처리하고 분석하는 데 사용됩니다. 실시간 모니터링, 실시간 예측 등의 작업에 적합합니다.
예시: 금융 거래 시스템에서 실시간으로 거래 데이터를 처리하여 사기 탐지, 신용 스코어 계산 등의 작업, 인터넷 트래픽 모니터링 등이 실시간 처리의 예시입니다.

<이벤트 처리 (Event Processing)>
주기: 이벤트가 발생하는 즉시 처리되는 방식입니다. 이벤트는 특정한 조건 또는 패턴을 충족하는 데이터입니다.
유형: 이벤트 기반의 데이터 처리와 분석을 수행하는 데 사용됩니다. 특정한 이벤트를 감지하고 처리하는 데 초점을 둡니다.
예시: 센서 데이터에서 특정한 패턴을 감지하여 경보를 발생시키는 작업, 실시간으로 발생하는 로그 데이터에서 비정상적인 이벤트를 탐지하는 작업 등이 이벤트 처리의 예시입니다.

[문항4] 
<단독 실행 (Standalone) 모드>
실행 형태: 하나의 머신에서 하둡의 모든 구성 요소를 실행하는 단순한 모드입니다. 네임노드, 데이터노드, 리소스 매니저 등 모든 구성 요소가 하나의 프로세스로 실행됩니다.
사용 목적: 개발 및 테스트를 위한 로컬 환경에서 하둡을 실행하고 간단한 작업을 수행하기 위해 사용됩니다. 대규모 데이터 처리나 분석에는 적합하지 않습니다.

<의사 분산(Pseudo-distributed) 모드>
실행 형태: 단일 머신에서 여러 개의 가상 머신 또는 컨테이너를 생성하여 하둡의 다양한 구성 요소를 각각 실행하는 모드입니다. 네임노드, 데이터노드, 리소스 매니저 등이 각각 별도의 프로세스로 실행됩니다.
사용 목적: 개발 및 테스트 목적으로 실제 분산 환경을 모방하여 하둡을 실행하고, 여러 개의 노드가 연동되는 상황을 시뮬레이션하기 위해 사용됩니다.

<완전 분산(Fully distributed) 모드>
실행 형태: 실제 분산 환경에서 하둡을 실행하는 모드입니다. 여러 대의 물리적인 서버 또는 가상 머신에서 각각의 구성 요소를 실행하며, 네임노드, 데이터노드, 리소스 매니저 등이 서로 다른 머신에서 실행됩니다.
사용 목적: 대규모 데이터 처리와 분석을 위해 실제 분산 환경을 구성하여 하둡을 실행하기 위해 사용됩니다. 데이터의 분산 저장과 병렬 처리에 효과적입니다.

[문항5]
<네임노드 (Namenode)>
- 역할: 네임노드는 HDFS의 중앙 제어 노드로, 파일 시스템의 메타데이터를 관리합니다. 파일의 블록 위치, 파일 권한, 파일과 블록의 복제 상태 등의 정보를 유지하고, 클라이언트 요청에 대한 응답과 데이터 블록의 위치 정보를 제공합니다.
- 특징:
1.메타데이터 관리: 네임노드는 파일 시스템의 메타데이터를 저장하고 관리합니다. 이러한 메타데이터는 메모리에 캐싱되어 빠른 응답을 제공합니다.
2.단일 장애점(Single Point of Failure): 네임노드는 HDFS의 중앙 제어 노드로써 싱글톤으로 동작합니다. 따라서, 네임노드에 장애가 발생하면 HDFS의 전체적인 가용성에 문제가 발생할 수 있습니다.

<데이터노드 (Datanode)>
- 역할: 데이터노드는 HDFS의 데이터 저장 노드로, 실제 데이터 블록을 저장하고 관리합니다. 데이터 블록의 생성, 삭제, 복제 등의 작업을 수행하며, 네임노드로부터 받은 지시에 따라 데이터를 읽고 쓸 수 있습니다.
- 특징:
1.데이터 저장: 데이터노드는 HDFS의 데이터를 저장하고 관리합니다. 데이터 블록을 복제하여 데이터의 안정성과 내결함성을 보장합니다.
2.자체적인 결정: 데이터노드는 자체적으로 데이터 블록의 복제 수행 등을 결정합니다. 네임노드로부터 지시를 받을 수 있지만, 데이터노드는 자체적으로 데이터 블록을 관리합니다.
